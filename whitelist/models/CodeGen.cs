// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

using System;
using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace whitelist.models
{
    public partial class Runners
    {
        [JsonProperty("changeNumber", Required = Required.Always)]
        public long ChangeNumber { get; set; }

        [JsonProperty("cloud", Required = Required.Always)]
        public string Cloud { get; set; }

        [JsonProperty("values", Required = Required.Always)]
        public List<Value> Values { get; set; }
    }

    public partial class Value
    {
        [JsonProperty("name", Required = Required.Always)]
        public string Name { get; set; }

        [JsonProperty("id", Required = Required.Always)]
        public string Id { get; set; }

        [JsonProperty("properties", Required = Required.Always)]
        public Properties Properties { get; set; }
    }

    public partial class Properties
    {
        [JsonProperty("changeNumber", Required = Required.Always)]
        public long ChangeNumber { get; set; }

        [JsonProperty("region", Required = Required.Always)]
        public string Region { get; set; }

        [JsonProperty("platform", Required = Required.Always)]
        public Platform Platform { get; set; }

        [JsonProperty("systemService", Required = Required.Always)]
        public string SystemService { get; set; }

        [JsonProperty("addressPrefixes", Required = Required.Always)]
        public List<string> AddressPrefixes { get; set; }
    }

    public enum Platform { Azure };

    public partial class Runners
    {
        public static Runners FromJson(string json) => JsonConvert.DeserializeObject<Runners>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Runners self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                PlatformConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PlatformConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Platform) || t == typeof(Platform?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Azure")
            {
                return Platform.Azure;
            }
            throw new Exception("Cannot unmarshal type Platform");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Platform)untypedValue;
            if (value == Platform.Azure)
            {
                serializer.Serialize(writer, "Azure");
                return;
            }
            throw new Exception("Cannot marshal type Platform");
        }

        public static readonly PlatformConverter Singleton = new PlatformConverter();
    }
}
